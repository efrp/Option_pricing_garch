library(tidyverse)
library(magrittr)
library(quantmod)
library(plyr)
library(dplyr)
library(rugarch)
start <- as.Date("2014-10-01")
end <- as.Date("2018-10-01")
ticker <- c("AMD", "AMZN", "AAPL", "BAC", "EBAY")
for (i in 1:5) {
getSymbols(ticker[i], src = "yahoo", from = start, to = end)
}
AMD_date <- as.data.frame(AMD)
AMD_date$date <- time(AMD)
AMD <- AMD_date[,c(1,7)]
colnames(AMD) <- c("Close", "Date")
AMZN_date <- as.data.frame(AMZN)
AMZN_date$date <- time(AMZN)
AMZN <- AMZN_date[,c(1,7)]
colnames(AMZN) <- c("Close", "Date")
AAPL_date <- as.data.frame(AAPL)
AAPL_date$date <- time(AAPL)
AAPL <- AAPL_date[,c(1,7)]
colnames(AAPL) <- c("Close", "Date")
BAC_date <- as.data.frame(BAC)
BAC_date$date <- time(BAC)
BAC <- BAC_date[,c(1,7)]
colnames(BAC) <- c("Close", "Date")
EBAY_date <- as.data.frame(EBAY)
EBAY_date$date <- time(EBAY)
EBAY <- EBAY_date[,c(1,7)]
colnames(EBAY) <- c("Close", "Date")
data <- join_all(list(AMD, AMZN, AAPL, BAC, EBAY), by="Date", type='inner')
colnames(data) <- c("AMD", "Date", "AMZN", "AAPL", "BAC", "EBAY")
data<-data[,c("Date", "AMD", "AMZN", "AAPL", "BAC", "EBAY")]
price_ts <- data
for (i in 1:1006) {
data[i,-1]<-log(data[i,-1]/data[i+1,-1])
}
data<-data[1:1006,]
forecastperiod<-50
data[1007:(1006+forecastperiod),1]<-as.Date(seq(from = end+1, to = end+forecastperiod, by=1))
i = 2
plot(data[1:1006,1], data[1:1006,i], main = ticker[i-1], type="l", xlab="Date", ylab=ticker[i-1])
install.packages("tidyquant")
start <- as.Date("2014-10-01")
end <- as.Date("2018-10-01")
yahoo <- function(ticker, start, end) {
tq_get(ticker, get = "stock.prices", from = start, to = end) %>%
select(date, adjusted) %>%
mutate( LogPrice = log(adjusted), LogReturn = c(0,diff(LogPrice)))
}
acf(yahoo("AAPL", start, end)[,4])
library(tidyverse)
library(tidyquant)
library(magrittr)
library(quantmod)
library(plyr)
library(dplyr)
install.packages("rugarch")
library(rugarch)
start <- as.Date("2014-10-01")
end <- as.Date("2018-10-01")
yahoo <- function(ticker, start, end) {
tq_get(ticker, get = "stock.prices", from = start, to = end) %>%
select(date, adjusted) %>%
mutate( LogPrice = log(adjusted), LogReturn = c(0,diff(LogPrice)))
}
acf(yahoo("AAPL", start, end)[,4])
pacf(yahoo("AAPL", start, end)[,4], lag.max = 100)
d = yahoo("AAPL", start, end)
model=ugarchspec(
variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
distribution.model = "norm"
)
summary(model)
model
modelfit = ugarchfit(data=data.frame(d)[,c(1,4)], spec = model, solver = "solnp",
fit.control=list(scale=1), solver.control=list(trace=1))
modelfit
plot(modelfit, which = "all")
modelfit = ugarchfit(data=data.frame(d)[,c(1,4)], spec = model, solver = "solnp",
fit.control=list(scale=1), solver.control=list(trace=1))
plot(modelfit, which = "all")
modelfit@fit$hessian
modelfit@fit$coef
modelfit
ugarchforecast(fitORspec, data = NULL, n.ahead = 10, n.roll = 0,
out.sample = 0)
ugarchforecast(modelfit , data = NULL, n.ahead = 10, n.roll = 0, out.sample = 0)
d
ugarchforecast(modelfit , data = data.frame(d)[,c(1,4)], n.ahead = 10, n.roll = 0, out.sample = 0)
data.frame(d)[,c(1,4)]
ugarchforecast(modelfit , data = NULL, n.ahead = 10, n.roll = 0, out.sample = 0)
ugarchforecast(model , data = NULL, n.ahead = 10, n.roll = 0, out.sample = 0)
ugarchforecast(modelfit , data = NULL, n.ahead = 10, n.roll = 0, out.sample = 0)
data.frame(d)[1000:,c(1,4)]
data.frame(d)[1000:1007,c(1,4)]
ugarchforecast(modelfit , data = data.frame(d)[,c(4)], n.ahead = 10, n.roll = 0, out.sample = 0)
data.frame(d)[,c(4)]
modelfit = ugarchfit(data=data.frame(d)[,c(4)], spec = model, solver = "solnp",
fit.control=list(scale=1), solver.control=list(trace=1))
ugarchforecast(modelfit , data = NULL, n.ahead = 10, n.roll = 0, out.sample = 0)
plot(modelfit, which = "all")
#plot(modelfit, which = "all")
ugarchforecast(modelfit , data = NULL,
n.ahead = 1, n.roll = 2, out.sample = 2)
ugarchforecast(modelfit , data = NULL, n.ahead = 10, n.roll = 0, out.sample = 0)
#plot(modelfit, which = "all")
ugarchforecast(modelfit , data = NULL,
n.ahead = 1, n.roll = 2, out.sample = 2)
#plot(modelfit, which = "all")
ugarchforecast(modelfit , data = NULL,
n.ahead = 1, n.roll = 3, out.sample = 2)
#plot(modelfit, which = "all")
ugarchforecast(modelfit , data = NULL,
n.ahead = 1, n.roll = 3, out.sample = 2)
#plot(modelfit, which = "all")
ugarchforecast(modelfit , data = NULL,
n.ahead = 1, n.roll = 1, out.sample = 2)
#plot(modelfit, which = "all")
ugarchforecast(modelfit , data = NULL,
n.ahead = 1, n.roll = 1, out.sample = 2)
#modelfit = ugarchfit(data=data.frame(d)[,c(1,4)], spec = model, solver = "solnp",
#                    fit.control=list(scale=1), solver.control=list(trace=1))
modelfit = ugarchfit(data=data.frame(d)[,c(4)], spec = model, solver = "solnp",
fit.control=list(scale=1),out.sample=2 , solver.control=list(trace=1))
model=ugarchspec(
variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
distribution.model = "norm"
)
#modelfit = ugarchfit(data=data.frame(d)[,c(1,4)], spec = model, solver = "solnp",
#                    fit.control=list(scale=1), solver.control=list(trace=1))
modelfit = ugarchfit(data=data.frame(d)[,c(4)], spec = model, solver = "solnp",
fit.control=list(scale=1),out.sample=2 , solver.control=list(trace=1))
modelfit
#plot(modelfit, which = "all")
ugarchforecast(modelfit , data = NULL,
n.ahead = 1, n.roll = 1, out.sample = 2)
#plot(modelfit, which = "all")
ugarchforecast(modelfit , data = NULL,
n.ahead = 1, n.roll = 2, out.sample = 2)
#plot(modelfit, which = "all")
modelfor = ugarchforecast(modelfit , data = NULL,
n.ahead = 1, n.roll = 2, out.sample = 2)
sigma(modelfor)
fitted(modelfor)
coef(modelfit)
sigma(modelfor)
fitted(modelfor)
#plot(modelfit, which = "all")
modelfor = ugarchforecast(modelfit , data = NULL,
n.ahead = 10, n.roll = 2, out.sample = 2)
#plot(modelfit, which = "all")
modelfor
help("ugarchspec")
model=ugarchspec (
variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(1, 1)),
distribution.model = "norm"
)
modelroll=ugarchroll (
spec=model, data=data.frame(d)[,c(4)], n.ahead = 1, forecast.length = 100,
n.start = NULL, refit.every = 50, refit.window = c("recursive"),
window.size = NULL, solver = "hybrid", fit.control = list(),
solver.control = list(), calculate.VaR = TRUE, VaR.alpha = c(0.01,
0.05),
cluster = NULL, keep.coef = TRUE
)
modelroll
modelroll=ugarchroll (
spec=model, data=data.frame(d)[,c(4)], n.ahead = 1, forecast.length = 100,
n.start = NULL, refit.every = 50, refit.window = c("recursive"),
window.size = NULL, solver = "hybrid", fit.control = list(),
solver.control = list(), calculate.VaR = TRUE, VaR.alpha = c(0.01,
0.05),
cluster = NULL, keep.coef = TRUE
)
modelroll
modelroll["Realized"]
modelroll$Realized
modelroll.params
modelroll["forecast"]
modelroll@forecast
modelroll=ugarchroll (
spec=model, data=data.frame(d)[,c(4)], n.ahead = 1, forecast.length = 20,
n.start = NULL, refit.every = 5, refit.window = c("recursive"),
window.size = NULL, solver = "hybrid", fit.control = list(),
solver.control = list(), calculate.VaR = TRUE, VaR.alpha = c(0.01,
0.05),
cluster = NULL, keep.coef = TRUE
)
modelroll@forecast
modelroll=ugarchroll (
spec=model, data=data.frame(d)[,c(4)], n.ahead = 1, forecast.length = 20,
n.start = NULL, refit.every = 5, refit.window = c("recursive"),
window.size = NULL, solver = "hybrid", fit.control = list(),
solver.control = list(), calculate.VaR = TRUE, VaR.alpha = c(0.01,
0.05),
cluster = NULL, keep.coef = TRUE
)
modelroll@forecast
modelroll=ugarchroll (
spec=model, data=data.frame(d)[,c(4)], n.ahead = 1, forecast.length = 20,
n.start = NULL, refit.every = 5, refit.window = c("recursive"),
window.size = NULL, solver = "hybrid", fit.control = list(),
solver.control = list(),
cluster = NULL, keep.coef = TRUE
)
modelroll@forecast
modelroll=ugarchroll (
spec=model, data=data.frame(d)[,c(4)], n.ahead = 1, forecast.length = 8,
n.start = NULL, refit.every = 5, refit.window = c("recursive"),
window.size = NULL, solver = "hybrid", fit.control = list(),
solver.control = list(),
cluster = NULL, keep.coef = TRUE
)
modelroll@forecast
help("ugarchroll")
#modelfit = ugarchfit(data=data.frame(d)[,c(1,4)], spec = model, solver = "solnp",
#                    fit.control=list(scale=1), solver.control=list(trace=1))
modelfit = ugarchfit(data=data.frame(d)[,c(4)], spec = model, solver = "solnp",
fit.control=list(scale=1),out.sample=2 , solver.control=list(trace=1))
ugarchsim(fit = modelfit, n.sim = 100, n.start = 0, m.sim = 10,
startMethod = "sample")
modelsim = ugarchsim(fit = modelfit, n.sim = 100, n.start = 0, m.sim = 10,
startMethod = "sample")
modelsim
modelsim@simulation
modelsim = ugarchsim(fit = modelfit, n.sim = 5, n.start = 0, m.sim = 2,
startMethod = "sample")
modelsim@simulation
modelsim@simulation$seriesSim
modelsim = ugarchsim(fit = modelfit, n.sim = 5, n.start = 0, m.sim = 4,
startMethod = "sample")
modelsim@simulation$seriesSim
model=ugarchspec (
variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(1, 1)),
distribution.model = "norm"
)
#modelfit = ugarchfit(data=data.frame(d)[,c(1,4)], spec = model, solver = "solnp",
#                    fit.control=list(scale=1), solver.control=list(trace=1))
modelfit = ugarchfit(data=data.frame(d)[,c(1, 4)], spec = model, solver = "solnp",
fit.control=list(scale=1),out.sample=2 , solver.control=list(trace=1))
modelsim = ugarchsim(fit = modelfit, n.sim = 5, n.start = 0, m.sim = 4,
startMethod = "sample")
modelsim@simulation$seriesSim
aapl_data = data.frame(d)[,c(4)]
aapl_data = data.frame(d)[,c(1, 4)]
#modelfit = ugarchfit(data=data.frame(d)[,c(1,4)], spec = model, solver = "solnp",
#                    fit.control=list(scale=1), solver.control=list(trace=1))
modelfit = ugarchfit(data=data.frame(aapl_data)[, 2], spec = model, solver = "solnp",
fit.control=list(scale=1),out.sample=2 , solver.control=list(trace=1))
modelsim = ugarchsim(fit = modelfit, n.sim = 5, n.start = 0, m.sim = 4,
startMethod = "sample")
modelsim@simulation$seriesSim
SimPath <- function(stock_data, nsim = 63, msim = 1000){
modelfit = ugarchfit(data=data.frame(stock_data)[, 2], spec = model, solver = "solnp",
fit.control=list(scale=1),out.sample=2 , solver.control=list(trace=1))
modelsim = ugarchsim(fit = modelfit, n.sim = nsim, n.start = 0, m.sim = msim,
startMethod = "sample")
modelsim@simulation$seriesSim
}
SimPath(aapl_data)
paths <- SimPath(aapl_data)
paths[1]
paths[2]
paths[1,]
max(paths[1,])
max(paths[,1])
(paths[,1])
View(d)
aapl_data = yahoo("AAPL", start, end)
model=ugarchspec (
variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(1, 1)),
distribution.model = "norm"
)
#modelfit = ugarchfit(data=data.frame(d)[,c(1,4)], spec = model, solver = "solnp",
#                    fit.control=list(scale=1), solver.control=list(trace=1))
modelfit = ugarchfit(data=data.frame(aapl_data)[, 4], spec = model, solver = "solnp",
fit.control=list(scale=1),out.sample=2 , solver.control=list(trace=1))
modelsim = ugarchsim(fit = modelfit, n.sim = 5, n.start = 0, m.sim = 4,
startMethod = "sample")
aapl_data$adjusted
paths
paths[1,]
paths[,1]
colSums(paths)
exp(colSums(path))
exp(colSums(paths))
SimPath <- function(stock_data, nsim = 63, msim = 1000){
current_price = stock_data[dim(stock_data)[1], 2]
modelfit = ugarchfit(data=data.frame(stock_data)[, 4], spec = model, solver = "solnp",
fit.control=list(scale=1),out.sample=2 , solver.control=list(trace=1))
modelsim = ugarchsim(fit = modelfit, n.sim = nsim, n.start = 0, m.sim = msim,
startMethod = "sample")
endprice_vector = exp(colSums(modelsim@simulation$seriesSim))
}
endprices <- SimPath(aapl_data)
SimPath <- function(stock_data, nsim = 63, msim = 1000){
current_price = stock_data[dim(stock_data)[1], 2]
modelfit = ugarchfit(data=data.frame(stock_data)[, 4], spec = model, solver = "solnp",
fit.control=list(scale=1),out.sample=2 , solver.control=list(trace=1))
modelsim = ugarchsim(fit = modelfit, n.sim = nsim, n.start = 0, m.sim = msim,
startMethod = "sample")
endprice_vector = exp(colSums(modelsim@simulation$seriesSim)) * current_price
}
endprices <- SimPath(aapl_data)
SimEndReturns <- function(stock_data, nsim = 63, msim = 1000){
modelfit = ugarchfit(data=data.frame(stock_data)[, 4], spec = model, solver = "solnp",
fit.control=list(scale=1),out.sample=2 , solver.control=list(trace=1))
modelsim = ugarchsim(fit = modelfit, n.sim = nsim, n.start = 0, m.sim = msim,
startMethod = "sample")
endprice_vector = exp(colSums(modelsim@simulation$seriesSim))
}
end_returns <- SimEndReturns(aapl_data)
end_returns <- SimEndReturns(aapl_data)
EvOptionPricer <- function(stock_data, K, days_left, msim){
current_price = stock_data[dim(stock_data)[1], 2]
end_prices <- SimEndReturns(stock_data) * current_price
dif <- end_prices - current_price
dif[dif < 0] = 0
mean(dif)
}
aapl_data[1000, 2]
aapl_data[5000, 2]
aapl_data[500, 2]
aapl_data[1000:1007, 2]
aapl_data[1000:1008, 2]
EvOptionPricer <- function(stock_data, K, days_left = 63, msim = 1000){
current_price = stock_data[dim(stock_data)[1], 2]
end_prices <- SimEndReturns(stock_data, nsim = days_left, msim = msim) * current_price
dif <- end_prices - K
dif[dif < 0] = 0
mean(dif)
}
EvOptionPricer(aapl_data, 225)
stock_data = aapl_data
current_price = stock_data[dim(stock_data)[1], 2]
end_prices <- SimEndReturns(stock_data, nsim = days_left, msim = msim) * current_price
days_left = 63
msim = 1000
end_prices <- SimEndReturns(stock_data, nsim = days_left, msim = msim) * current_price
end_prices
end_returns <- SimEndReturns(aapl_data)
end_prices <- SimEndReturns(stock_data, nsim = days_left, msim = msim) * current_price
end_returns <- SimEndReturns(aapl_data)
end_returns <- SimEndReturns(stock_data, nsim = days_left, msim = msim)
current_price = data.frame(stock_data[dim(stock_data)[1], 2])
end_prices = end_returns * current_price
current_price
int(current_price)
value(current_price)
current_price = data.frame(stock_data[dim(stock_data)[1], 2])
current_price = as.numeric(stock_data[dim(stock_data)[1], 2])
end_prices = end_returns * current_price
dif <- end_prices - K
K = 230
dif <- end_prices - K
dif[dif < 0] = 0
mean(dif)
model=ugarchspec (
variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(1, 1)),
distribution.model = "norm"
)
SimEndReturns <- function(stock_data, nsim = 63, msim = 1000){
modelfit = ugarchfit(data=data.frame(stock_data)[, 4], spec = model, solver = "solnp",
fit.control=list(scale=1),out.sample=2 , solver.control=list(trace=1))
modelsim = ugarchsim(fit = modelfit, n.sim = nsim, n.start = 0, m.sim = msim,
startMethod = "sample")
endprice_vector = exp(colSums(modelsim@simulation$seriesSim))
}
end_returns <- SimEndReturns(aapl_data)
EvOptionPricer <- function(stock_data, K, days_left = 63, msim = 1000){
current_price = as.numeric(stock_data[dim(stock_data)[1], 2])
end_returns <- SimEndReturns(stock_data, nsim = days_left, msim = msim)
end_prices = end_returns * current_price
dif <- end_prices - K
dif[dif < 0] = 0
mean(dif)
}
EvOptionPricer(aapl_data, 225)
EvOptionPricer(aapl_data, 225)
EvOptionPricer(aapl_data, 225)
EvOptionPricer(aapl_data, 225)
hist_vol <- function(ts, days_in_y = 250){
return(sqrt(var(ts) * days_in_y))
}
hist_vol(data[,2])
data = aapl_data[, c(1, 4)]
hist_vol(data[,2])
head(data)
head(stock_data)
data = data.frame(aapl_data[, c(1, 2)])
hist_vol(data[,2])
data = data.frame(aapl_data[, c(1, 4)])
hist_vol(data[,2])
BsOptPricer <- function(ts, K, days_left, r = 0){
rets = log(ts/lag(ts))[-1]
vol <- hist_vol(rets)
S = ts[length(ts)]
d1 <- (log(S / K) + (r + vol ^ 2 / 2) * days_left / 250) /
(vol * sqrt(days_left / 250))
d2 <- d1 - vol * sqrt(days_left / 250)
price <- pnorm(d1) * S - pnorm(d2) * K * exp(-r * days_left / 250)
return(price)
}
BsOptPricer(data[,2], 225, 63)
data[,2]
data[,4]
data = data.frame(aapl_data[, c(1, 2, 4)])
head(data)
hist_vol(data[,3])
BsOptPricer <- function(ts, K, days_left, r = 0){
rets = log(ts/lag(ts))[-1]
vol <- hist_vol(rets)
S = ts[length(ts)]
d1 <- (log(S / K) + (r + vol ^ 2 / 2) * days_left / 250) /
(vol * sqrt(days_left / 250))
d2 <- d1 - vol * sqrt(days_left / 250)
price <- pnorm(d1) * S - pnorm(d2) * K * exp(-r * days_left / 250)
return(price)
}
BsOptPricer(data[,2], 225, 63)
BsOptPricer(data[,2], 225, 63)
BsOptPricer(data[,2], 225, 63, r = 0.01)
